import React from 'react'
import * as firebase from 'firebase'
//* * Declaration file generated by dts-gen */

export const actionTypes: {
  START: string
  SET: string
  REMOVE: string
  MERGE: string
  SET_PROFILE: string
  LOGIN: string
  LOGOUT: string
  LOGIN_ERROR: string
  NO_VALUE: string
  UNAUTHORIZED_ERROR: string
  ERROR: string
  CLEAR_ERRORS: string
  SET_LISTENER: string
  UNSET_LISTENER: string
  AUTHENTICATION_INIT_FINISHED: string
  AUTHENTICATION_INIT_STARTED: string
  SESSION_START: string
  SESSION_END: string
  FILE_UPLOAD_START: string
  FILE_UPLOAD_ERROR: string
  FILE_UPLOAD_PROGRESS: string
  FILE_UPLOAD_COMPLETE: string
  FILE_DELETE_START: string
  FILE_DELETE_ERROR: string
  FILE_DELETE_COMPLETE: string
  AUTH_UPDATE_START: string
  AUTH_UPDATE_ERROR: string
  AUTH_UPDATE_SUCCESS: string
  AUTH_EMPTY_CHANGE: string
  AUTH_LINK_ERROR: string
  AUTH_LINK_START: string
  AUTH_LINK_SUCCESS: string
  AUTH_RELOAD_ERROR: string
  AUTH_RELOAD_START: string
  AUTH_RELOAD_SUCCESS: string
  EMAIL_UPDATE_ERROR: string
  EMAIL_UPDATE_START: string
  EMAIL_UPDATE_SUCCESS: string
  PROFILE_UPDATE_START: string
  PROFILE_UPDATE_ERROR: string
  PROFILE_UPDATE_SUCCESS: string
}

export const constants: {
  actionTypes: {
    AUTHENTICATION_INIT_FINISHED: string
    AUTHENTICATION_INIT_STARTED: string
    AUTH_EMPTY_CHANGE: string
    AUTH_LINK_ERROR: string
    AUTH_LINK_START: string
    AUTH_LINK_SUCCESS: string
    AUTH_RELOAD_ERROR: string
    AUTH_RELOAD_START: string
    AUTH_RELOAD_SUCCESS: string
    AUTH_UPDATE_ERROR: string
    AUTH_UPDATE_START: string
    AUTH_UPDATE_SUCCESS: string
    CLEAR_ERRORS: string
    EMAIL_UPDATE_ERROR: string
    EMAIL_UPDATE_START: string
    EMAIL_UPDATE_SUCCESS: string
    ERROR: string
    FILE_DELETE_COMPLETE: string
    FILE_DELETE_ERROR: string
    FILE_DELETE_START: string
    FILE_UPLOAD_COMPLETE: string
    FILE_UPLOAD_ERROR: string
    FILE_UPLOAD_PROGRESS: string
    FILE_UPLOAD_START: string
    LOGIN: string
    LOGIN_ERROR: string
    LOGOUT: string
    MERGE: string
    NO_VALUE: string
    PROFILE_UPDATE_ERROR: string
    PROFILE_UPDATE_START: string
    PROFILE_UPDATE_SUCCESS: string
    REMOVE: string
    SESSION_END: string
    SESSION_START: string
    SET: string
    SET_LISTENER: string
    SET_PROFILE: string
    START: string
    UNAUTHORIZED_ERROR: string
    UNSET_LISTENER: string
  }
  defaultConfig: {
    attachAuthIsReady: boolean
    autoPopulateProfile: boolean
    dispatchOnUnsetListener: boolean
    dispatchRemoveAction: boolean
    enableEmptyAuthChanges: boolean
    enableLogging: boolean
    enableRedirectHandling: boolean
    firebaseStateName: string
    presence: any
    preserveOnEmptyAuthChange: any
    preserveOnLogout: any
    resetBeforeLogin: boolean
    sessions: string
    setProfilePopulateResults: boolean
    updateProfileOnLogin: boolean
    userProfile: any
  }
}

/**
 * Promise which resolves when auth state has loaded.
 */
export function authIsReady(store: object, ...args: any[]): any

/**
 * Factory function for creating a firebaseConnect Higher Order Component
 */
export function createFirebaseConnect(...args: any[]): any

export function createFirebaseInstance(
  firebase: any,
  configs: any,
  dispatch: any,
  ...args: any[]
): any

export function createFirestoreConnect(...args: any[]): any

export function createWithFirebase(storeKey: any): any

export function createWithFirestore(storeKey: any): any

export function firebase(...args: any[]): any

export interface ReactReduxFirebaseState<T> {
  auth: {
    apiKey: string
    appName: string
    authDomain: string
    createdAt: string
    displayName: string
    email: string
    emailVerified: boolean
    isAnonymous: boolean
    isEmpty: boolean
    isLoaded: boolean
    lastLoginAt: string
    phoneNumber: string | null
    photoURL: string
    providerData: {
      displayName: string
      email: string
      phoneNumber: null
      photoURL: string
      providerId: string
      uid: string
    }[]
    redirectEventId: null
    stsTokenManager: {
      accessToken: string
      apiKey: string
      expirationTime: number
      refreshToken: string
    }
    uid: string
  }
  authError: null
  data: {}
  errors: any[]
  isInitializing: boolean
  listeners: {
    allIds: string[]
    byId: {}
  }
  ordered: {}
  profile: T
  requested: {}
  requesting: {}
  timestamps: {}
}

export interface FirestoreQueryOptions {
  collection: string
  doc?: string
  subcollections?: FirestoreQueryOptions[]
  where?: string[] | string[][]
  orderBy?: string[] | string[][]
  limit?: number
  startAfter?: number
  endAt?: number
  endBefore?: number
  storeAs?: string
}

export interface WithFirestoreProps {
  firestore: {
    // Blob: ƒ PublicConstructor()
    // CACHE_SIZE_UNLIMITED: -1
    // CollectionReference: ƒ PublicConstructor()
    // DocumentReference: ƒ PublicConstructor()
    // DocumentSnapshot: ƒ PublicConstructor()
    // FieldPath: ƒ FieldPath$$1()
    // Firestore: ƒ PublicConstructor()
    // GeoPoint: ƒ GeoPoint(latitude, longitude)
    // Query: ƒ PublicConstructor()
    // QueryDocumentSnapshot: ƒ PublicConstructor()
    // QuerySnapshot: ƒ PublicConstructor()
    // Timestamp: ƒ Timestamp(seconds, nanoseconds)
    // Transaction: ƒ PublicConstructor()
    // WriteBatch: ƒ PublicConstructor()
    // batch: ƒ ()
    // collection: ƒ ()
    // configureClient: ƒ ()
    // default: ƒ ()
    // deleteRef: ƒ ()
    // disableNetwork: ƒ ()
    // enableNetwork: ƒ ()
    // enablePersistence: ƒ ()
    // ensureClientConfigured: ƒ ()
    // runTransaction: ƒ ()
    // setListeners: ƒ ()
    // setLogLevel: ƒ (level)
    // settings: ƒ ()
    // unsetListener: ƒ ()
    // unsetListeners: ƒ ()

    doc: Function
    add: (
      collectionPath: string | FirestoreQueryOptions,
      data: Object
    ) => Promise<{ id: string }>
    get: (docPath: string | FirestoreQueryOptions) => void
    set: (docPath: string | FirestoreQueryOptions, data: Object) => void
    update: (
      docPath: string | FirestoreQueryOptions,
      data: Object
    ) => Promise<void>
    delete: (docPath: string | FirestoreQueryOptions) => void
    setListener: (params: FirestoreQueryOptions) => void
    onSnapshot: (params: FirestoreQueryOptions) => void
    FieldValue: firebase.firestore.FieldValue
  }
}

export interface WithFirebaseProps<T = File> {
  firebase: {
    /**
     * confirmPasswordReset: ƒ confirmPasswordReset(code, password)
     * createUser: ƒ createUser(credentials, profile)
     * deleteFile: ƒ deleteFile(path, dbPath)
     * dispatch: ƒ ()
     * firestore: ƒ serviceNamespace(appArg)
     * initializeApp: ƒ initializeApp(options, rawConfig)
     * initializeAuth: ƒ ()
     * linkWithCredential: ƒ linkWithCredential(credential)
     * login: ƒ login(credentials)
     * logout: ƒ logout()
     * promiseEvents: ƒ promiseEvents(watchArray, options)
     * push: ƒ push(path, value, onComplete)
     * pushWithMeta: ƒ pushWithMeta(path, value, onComplete)
     * ref: ƒ ref(path)
     * reloadAuth: ƒ reloadAuth()
     * remove: ƒ remove(path, onComplete, options)
     * resetPassword: ƒ resetPassword(credentials)
     * set: ƒ (path, value, onComplete)
     * setWithMeta: ƒ setWithMeta(path, value, onComplete)
     * signInWithPhoneNumber: ƒ ()
     * storage: ƒ serviceNamespace(appArg)
     * unWatchEvent: ƒ unWatchEvent(type, path, queryId)
     * uniqueSet: ƒ uniqueSet(path, value, onComplete)
     * update: ƒ update(path, value, onComplete)
     * updateAuth: ƒ updateAuth(authUpdate, updateInProfile)
     * updateEmail: ƒ updateEmail(newEmail, updateInProfile)
     * updateProfile: ƒ updateProfile(profileUpdate, options)
     * updateWithMeta: ƒ updateWithMeta(path, value, onComplete)
     * verifyPasswordResetCode: ƒ verifyPasswordResetCode(code)
     * watchEvent: ƒ watchEvent(type, path, storeAs)
     */

    auth: () => firebase.auth

    /**
     * Upload multiple files to Firebase Storage with the option to store their metadata in Firebase Database
     * @path String Path to location on Firebase which to set
     * @files File File object to upload (usually from a select-file or a drag/drop onDrop)
     * @dbPath String Database path to place uploaded files metadata.
     */
    uploadFile: (
      path: string,
      files: T,
      dbPath?: string,
      options?: Object
    ) => Promise<firebase.storage.UploadTaskSnapshot>

    /**
     * Upload multiple files to Firebase Storage with the option to store their metadata in Firebase Database
     * @path String Path to location on Firebase which to set
     * @files Array Array of File objects to upload (usually from a select-file or a drag/drop onDrop)
     * @dbPath String Database path to place uploaded files metadata.
     */
    uploadFiles: (
      path: string,
      files: T[],
      dbPath?: string,
      options?: Object
    ) => Promise<{ uploadTaskSnapshot: firebase.storage.UploadTaskSnapshot }[]>
  }
}

/**
 * React HOC that attaches/detaches Firebase Real Time Database listeners on mount/unmount
 */
export function firebaseConnect(...args: any[]): any

/**
 * Reducer for Firebase state
 */
export function firebaseReducer(...args: any[]): any

/**
 * Reducer for Firebase state
 */
export function firebaseStateReducer(...args: any[]): any

/**
 * React HOC that attaches/detaches Cloud Firestore listeners on mount/unmount
 */
export function firestoreConnect(...args: any[]): any

/**
 * Reducer for Firestore state
 */
export function firestoreReducer(...args: any[]): any

export function fixPath(path: string): string

/**
 * Get Firebase instance
 */
export function getFirebase(): any

export function getVal(firebase: object, path: string, notSetValue?: any): any

export function isEmpty(...args: any[]): boolean

export function isLoaded(...args: any[]): boolean

export function populate(
  state: object,
  path: string,
  populates: any,
  notSetValue?: any
): any

/**
 * React Context provider for Firebase instance (with methods wrapped in dispatch). Needed to use HOCs
 * like firebaseConnect and withFirebase.
 */
export function ReactReduxFirebaseProvider(
  props: ReactReduxFirebaseProviderProps<T>
): any

/**
 * Props passed to ReactReduFirebaseContext component
 */
export interface ReactReduxFirebaseProviderProps<T> {
  value?: T
  firebase: object
  config: object
  dispatch: (action: object) => void
  children?: React.ReactNode
  initalizeAuth?: boolean
  createFirestoreInstance?: (
    firebase: object,
    config: object,
    dispatch: (action: object) => void
  ) => object
}

/**
 * React Context for Firebase instance.
 */
export namespace ReduxFirestoreContext {
  const prototype: {}
}

/**
 * Props passed to ReactReduFirebaseContext component
 */
export interface ReduxFirestoreProviderProps {
  firebase: object
  config: object
  dispatch: (action: object) => void
  createFirestoreInstance: (
    firebase: object,
    config: object,
    dispatch: (action: object) => void
  ) => object
  children?: React.ReactNode
  initalizeAuth?: boolean
}

/**
 * React Context provider for Firestore instance (with methods wrapped in dispatch). Needed to use HOCs
 * like firestoreConnect and withFirestore.
 */
export function ReduxFirestoreProvider(props: ReduxFirestoreProviderProps): any

/**
 * React Higher Order Component that passes firebase as a prop (comes from context.store.firebase)
 */
export function withFirebase(...args: any[]): any
/**
 * React Higher Order Component that passes firestore as a prop (comes from context.store.firestore)
 */
export function withFirestore(...args: any[]): any

export namespace authIsReady {
  const prototype: {}
}

export namespace createFirebaseConnect {
  const prototype: {}
}

export namespace createFirebaseInstance {
  const prototype: {}
}

export namespace createFirestoreConnect {
  const prototype: {}
}

export namespace createWithFirebase {
  const prototype: {}
}

export namespace createWithFirestore {
  const prototype: {}
}

export namespace firebase {
  const prototype: {}
}

export namespace firebaseConnect {
  const prototype: {}
}

export namespace firebaseReducer {
  const prototype: {}
}

export namespace firebaseStateReducer {
  const prototype: {}
}

export namespace firestoreConnect {
  const prototype: {}
}

export namespace firestoreReducer {
  const prototype: {}
}

export namespace fixPath {
  const prototype: {}
}

export namespace getVal {
  const prototype: {}
}

export namespace helpers {
  function fixPath(path: any): any

  function getVal(firebase: any, path: any, notSetValue?: any): any

  function isEmpty(...args: any[]): any

  function isLoaded(...args: any[]): any

  function populate(
    state: any,
    path: any,
    populates: any,
    notSetValue?: any
  ): any

  namespace fixPath {
    const prototype: {}
  }

  namespace getVal {
    const prototype: {}
  }

  namespace isEmpty {
    const prototype: {}
  }

  namespace isLoaded {
    const prototype: {}
  }

  namespace populate {
    const prototype: {}
  }
}

export namespace isEmpty {
  const prototype: {}
}

export namespace isLoaded {
  const prototype: {}
}

export namespace populate {
  const prototype: {}
}

export namespace reactReduxFirebase {
  const prototype: {}
}

export namespace reduxFirebase {
  const prototype: {}
}

export namespace reduxReactFirebase {
  const prototype: {}
}

export namespace withFirebase {
  const prototype: {}
}

export namespace withFirestore {
  const prototype: {}
}
